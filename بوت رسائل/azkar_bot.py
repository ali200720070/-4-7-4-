#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุจูุช ุงูุฃุฐูุงุฑ - ูุณุฎุฉ ูุฏูุฌุฉ ุงูุชููู ููุชุนุฑูู ุนูู ุงููููุงุช ูุงููุฌููุนุงุช
ุณููู ุงูุชุทุจูู
- ุนูุฏ ุฅุถุงูุชู ูุฃู ูุฌููุนุฉ ุฃู ููุงุฉ ูุจุฏุฃ ูููุฉ ุชุฑุณู ุฐูุฑ ูู ุณุงุนุชูู
- ูุญุฐู ุงูุฑุณุงูุฉ ุงูุณุงุจูุฉ ุฅู ุฃููู ูุจู ุฅุฑุณุงู ุงูุฐูุฑ ุงูุฌุฏูุฏ
- ูุชุฌุงูู ุฃุฎุทุงุก ุงูุญุฐู ุฃู ููุฏ ุงูุตูุงุญูุงุช ุจูุฏูุก
- ุฌุงูุฒ ููุฑูุน ุนูู Railway ูู worker
"""

import logging
from typing import Dict

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ChatMemberHandler,
    ContextTypes,
    filters,
)

# ====== ุงูุชููู ูุฏูุฌ ุญุณุจ ุทูุจู ======
BOT_TOKEN = "8402234547:AAEoQZWPToTRkdHUc5qvy91JQB5619QUG9U"
# ===================================

# ุฅุนุฏุงุฏ ุงูููู
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("azkar_bot")

# ูุงุฆูุฉ ุงูุฃุฐูุงุฑ โ ุถุน ุฃู ุนุฏูู ููุง ุชุญุจ
AZKAR_LIST = [
    "ุงูููู ุจู ุฃุตุจุญูุง ูุจู ุฃูุณููุง ูุจู ูุญูู ูุจู ูููุช ูุฅููู ุงููุดูุฑ",
    "ุงูููู ุฃูุช ุฑุจู ูุง ุฅูู ุฅูุง ุฃูุช ุฎููุชูู ูุฃูุง ุนุจุฏู ูุฃุบูุฑ ูู",
    "ูุง ุฅูู ุฅูุง ุงููู ูุญุฏู ูุง ุดุฑูู ูู ูู ุงูููู ููู ุงูุญูุฏ ููู ุนูู ูู ุดูุก ูุฏูุฑ",
    "ุขูุฉ ุงููุฑุณู",
    "ูุง ุญู ูุง ูููู ุจุฑุญูุชู ุฃุณุชุบูุซ ุฃุตูุญ ูู ุดุฃูู ููู ููุง ุชูููู ุฅูู ููุณู",
    "ุจุณู ุงููู ุงูุฐู ูุง ูุถุฑ ูุน ุงุณูู ุดูุก ูู ุงูุฃุฑุถ ููุง ูู ุงูุณูุงุก ููู ุงูุณููุน ุงูุนููู",
    "ุงูููู ุฅูู ุฃุณุฃูู ูู ุงูุฎูุฑ ููู ุนุงุฌูู ูุขุฌูู",
    "ุงูููู ุฃุตูุญ ูู ุฏููู ุงูุฐู ูู ุนุตูุฉ ุฃูุฑู",
    "ุฑุจูุง ุขุชูุง ูู ุงูุฏููุง ุญุณูุฉ ููู ุงูุขุฎุฑุฉ ุญุณูุฉ ูููุง ุนุฐุงุจ ุงููุงุฑ",
    "ูุง ูููุจ ุงููููุจ ุซุจุช ููุจู ุนูู ุฏููู",
    "ุฑุจ ุงุบูุฑ ูู ูุชุจ ุนูู ุฅูู ุฃูุช ุงูุชูุงุจ ุงูุบููุฑ",
    "ุงูููู ุตู ูุณูู ุนูู ูุจููุง ูุญูุฏ ูุขูู ูุตุญุจู ุฃุฌูุนูู",
]


class SimpleAzkarBot:
    """
    ููุงุณ ูุฏูุฑ ุงูุจูุช
    ูุฎุฒู ูุคุดุฑ ูู ุฏุฑุฏุดุฉ ูู self.chat_states
    ููุดุบูู ูููุฉ ูุชูุฑุฑุฉ ูุณูุงุฉ ุจุงุณู chat_id ููู ูุง ุชุชูุฑุฑ ุงูููุงู
    """

    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.chat_states: Dict[int, int] = {}
        self.setup_handlers()

    def setup_handlers(self) -> None:
        # ุฃูุฑ start ููุฎุงุต ูุงููุฌููุนุงุช
        self.application.add_handler(CommandHandler("start", self.start))

        # ุชุชุจุน ุญุงูุฉ ุงูุจูุช ุนูุฏ ุฅุถุงูุชู ุฃู ุชุบููุฑ ุตูุงุญูุชู ูู ุงููุฌููุนุงุช/ุงููููุงุช
        self.application.add_handler(
            ChatMemberHandler(self.track_chats, ChatMemberHandler.MY_CHAT_MEMBER)
        )

        # ุงุณุชุฌุงุจุฉ ุนูุฏ ุฃู ููุดูุฑ ูู ุงููููุงุช ุฃู ุฑุณุงูุฉ ูู ุงููุฌููุนุงุช/ุงูุณูุจุฑุฌุฑูุจ
        # ูุณุชุฎุฏู UpdateType CHANNEL_POST ููุชุฃูุฏ ูู ุงูุชูุงุท ููุดูุฑุงุช ุงููููุงุช
        channel_post_filter = filters.UpdateType.CHANNEL_POST
        group_msg_filter = (filters.ChatType.GROUP | filters.ChatType.SUPERGROUP) & ~filters.COMMAND

        self.application.add_handler(
            MessageHandler(channel_post_filter | group_msg_filter, self.handle_message)
        )

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ุฑุฏ ุชุฑุญูุจู ุจุณูุท ูู ุงูุฎุงุต ุฃู ุชุฃููุฏ ูู ุงููุฌููุนุงุช"""
        try:
            chat = update.effective_chat
            if chat and chat.type == "private":
                await update.message.reply_text(
                    "ุฃููุงู ุจู ูุฐุง ุจูุช ุงูุฃุฐูุงุฑ ุณุฃุฑุณู ุฐูุฑูุง ูู ุณุงุนุชูู ูููุฌููุนุงุช ูุงููููุงุช ุงูุชู ุฃูุถุงู ุฅูููุง"
                )
            else:
                # ูู ุงููุฌููุนุฉ ูุฑุฏ ุจุดูู ูุจุณูุท ุฅู ุฃููู
                if update.message:
                    await update.message.reply_text("ุจูุช ุงูุฃุฐูุงุฑ ุฌุงูุฒ ุณูุชู ุฅุฑุณุงู ุงูุฃุฐูุงุฑ ูู ุณุงุนุชูู")
        except Exception:
            logger.debug("ุชุนุฐูุฑ ุฅุฑุณุงู ุฑุณุงูุฉ start (ุฑุจูุง ูู ููุน ููุงุฉ ูุง ูุณูุญ ุจุงูุฑุฏ)")

    def get_next_zikr(self, chat_id: int) -> str:
        """ุฅุฑุฌุงุน ุงูุฐูุฑ ุงูุชุงูู ูุน ุชุญุฏูุซ ูุคุดุฑ ุงูุฏุฑุฏุดุฉ"""
        if chat_id not in self.chat_states:
            self.chat_states[chat_id] = 0
        idx = self.chat_states[chat_id]
        zikr = AZKAR_LIST[idx]
        self.chat_states[chat_id] = (idx + 1) % len(AZKAR_LIST)
        return zikr

    async def send_zikr(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        ุงููููุฉ ุงููุชูุฑุฑุฉ ุงูุชู ูุถุนูุง job_queue
        ุชุญุฐู ุงูุฑุณุงูุฉ ุงูุณุงุจูุฉ ุฅุฐุง ูุงู ุจุฅููุงู ุงูุจูุช ุซู ุชุฑุณู ุงูุฐูุฑ ุงูุฌุฏูุฏ
        """
        job = context.job
        chat_id = job.chat_id
        if chat_id is None:
            return

        # ูุญุงููุฉ ุญุฐู ุงูุฑุณุงูุฉ ุงูุณุงุจูุฉ ุฅู ููุฌุฏุช
        last_msg_id = None
        if getattr(job, "data", None) and isinstance(job.data, dict):
            last_msg_id = job.data.get("last_message_id")

        try:
            if last_msg_id:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=last_msg_id)
                except Exception as e:
                    # ูุฏ ูุง ุชููู ูุฏูู ุตูุงุญูุฉ ุงูุญุฐู ูู ุงููููุงุช ุฃู ุญูุฐูุช ุงูุฑุณุงูุฉ ูุณุจูุงู
                    logger.debug(f"ุชุนุฐุฑ ุญุฐู ุงูุฑุณุงูุฉ ุงูุณุงุจูุฉ ูู {chat_id} ุณุจุจ: {e}")

            # ุฅุฑุณุงู ุงูุฐูุฑ ุงูุฌุฏูุฏ
            zikr = self.get_next_zikr(chat_id)
            sent = await context.bot.send_message(
                chat_id=chat_id,
                text=f"๐ฟ ุฐูุฑ ูุฏุนุงุก\n\n{zikr}",
                parse_mode=ParseMode.MARKDOWN,
            )

            # ุญูุธ ูุนุฑู ุงูุฑุณุงูุฉ ูู ุจูุงูุงุช ุงููููุฉ ูุญุฐููุง ูุงุญูุงู
            job.data = {"last_message_id": sent.message_id}

        except Exception as e:
            err = str(e).lower()
            logger.error(f"ุฎุทุฃ ุฃุซูุงุก ุฅุฑุณุงู ุฐูุฑ ุฅูู {chat_id} โ {e}")

            # ุญุงูุงุช ุดุงุฆุนุฉ ุชุณุชุฏุนู ุฅููุงู ุงููููุฉ
            if "bot was kicked" in err or "chat not found" in err or "forbidden" in err:
                logger.info(f"ุฅููุงู ูููุฉ {chat_id} ูุฃู ุงูุจูุช ุทูุฑุฏ ุฃู ููุฏ ุตูุงุญูุฉ ุงููุตูู")
                try:
                    # ุฅุฒุงูุฉ ุงููููุฉ ุงููุณูุงุฉ ุจูุฐุง chat_id ุฅู ููุฌุฏุช
                    for j in context.job_queue.get_jobs_by_name(str(chat_id)):
                        j.schedule_removal()
                except Exception:
                    pass

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        ุนูุฏ ูุฌูุฏ ููุดูุฑ ูู ููุงุฉ ุฃู ุฑุณุงูุฉ ูู ูุฌููุนุฉ ูุจุฏุฃ ุงููููุฉ ุฅุฐุง ูู ุชูู ุชุนูู
        ูุถูู ูุฐุง ุฃู ุงูุจูุช ูุจุฏุฃ ุงูุนูู ุนูุฏ ุฅุถุงูุชู ุฃู ุนูุฏ ุฃูู ุชูุงุนู
        """
        chat = update.effective_chat
        if not chat:
            return

        chat_id = chat.id
        existing = context.job_queue.get_jobs_by_name(str(chat_id))
        if not existing:
            title = getattr(chat, "title", str(chat_id))
            logger.info(f"ูู ุชููุฌุฏ ูููุฉ ุณุงุจูุฉุ ุจุฏุก ูููุฉ ุฌุฏูุฏุฉ ููุฏุฑุฏุดุฉ {title} ({chat_id})")
            self.start_zikr_job(context, chat_id, title)

    async def track_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        ุชุชุจุน ุญุงูุงุช ุงูุจูุช ุนูุฏ ุฅุถุงูุชู ุฃู ุชุบููุฑ ุตูุงุญูุชู
        ุณูุดุบูู ุงููููุฉ ุนูุฏูุง ุชููู ุญุงูุฉ ุงูุจูุช member ุฃู administrator
        """
        if not update.chat_member:
            return

        chat = update.chat_member.chat
        if not chat:
            return

        new_member = update.chat_member.new_chat_member
        if not new_member:
            return

        # ุชุฃูุฏ ุฃู ุงูุชุญุฏูุซ ุนู ุงูุจูุช ููุณู
        bot_id = context.bot.id
        if new_member.user.id != bot_id:
            return

        new_status = new_member.status
        # ุฅุฐุง ุฃุตุจุญ ุงูุจูุช ุนุถูุงู ุฃู ุฃุฏูู ุงุจุฏุฃ ุงููููุฉ
        if new_status in ("member", "administrator"):
            logger.info(f"ุชูุช ุฅุถุงูุฉ ุงูุจูุช ุฃู ุชุฑููุชู ูู {getattr(chat,'title',chat.id)} ุจุฏุก ุงููููุฉ")
            self.start_zikr_job(context, chat.id, getattr(chat, "title", str(chat.id)))

    def start_zikr_job(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, chat_title: str) -> None:
        """
        ุจุฏุก ูููุฉ ูุชูุฑุฑุฉ ูุณูุงุฉ ุจุงุณู chat_id ูุชุฌูุจ ุงูุชูุฑุงุฑุงุช
        ุงููุงุตู = 7200 ุซุงููุฉ = ุณุงุนุชุงู
        """
        logger.info(f"ุจุฏุก/ุชุญุฏูุซ ูููุฉ ุงูุฃุฐูุงุฑ ููุฏุฑุฏุดุฉ {chat_title} id={chat_id}")

        # ุฅุฒุงูุฉ ุฃู ููุงู ุณุงุจูุฉ ุจููุณ ุงูุงุณู
        for job in context.job_queue.get_jobs_by_name(str(chat_id)):
            job.schedule_removal()

        # ุชุดุบูู ุงููููุฉ ุงููุชูุฑุฑุฉ
        context.job_queue.run_repeating(
            callback=self.send_zikr,
            interval=7200,  # ุณุงุนุชุงู
            first=1,        # ูุจุฏุฃ ุฎูุงู ุซุงููุฉ ูุงุญุฏุฉ ูุชูุนูู ุงููููุฉ ููุฑุงู
            name=str(chat_id),
            chat_id=chat_id,
            data={},        # ุญูู ูุญูุธ last_message_id ูุงุญูุงู
        )

    def run(self) -> None:
        """ุชุดุบูู ุงูุจูุช ุจุงูู polling"""
        logger.info("ุชุดุบูู ุจูุช ุงูุฃุฐูุงุฑ (polling)")
        self.application.run_polling()

# ===== ููุทุฉ ุงูุฏุฎูู =====
def main() -> None:
    bot = SimpleAzkarBot(BOT_TOKEN)
    bot.run()


if __name__ == "__main__":
    main()
